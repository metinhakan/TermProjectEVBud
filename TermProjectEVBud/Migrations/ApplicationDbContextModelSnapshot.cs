// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TermProjectEVBud.Data;

#nullable disable

namespace TermProjectEVBud.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.4.23259.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TermProjectEVBud.Data.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"));

                    b.Property<int?>("MemberId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("ModelRange")
                        .HasColumnType("int");

                    b.HasKey("CarId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ModelId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Charger", b =>
                {
                    b.Property<int>("ChargerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChargerId"));

                    b.Property<int>("ChargerCompany")
                        .HasColumnType("int");

                    b.Property<float>("ChargerFare")
                        .HasColumnType("real");

                    b.Property<string>("ChargerLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChargerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("OccupationStatus")
                        .HasColumnType("bit");

                    b.HasKey("ChargerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LocationId");

                    b.ToTable("Chargers");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.ChargerCompany", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<int>("ChargerNumber")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("ChargerCompanies");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Charging", b =>
                {
                    b.Property<int>("ChargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChargeId"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("ChargerId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<bool>("OccupationStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeFinished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStarted")
                        .HasColumnType("datetime2");

                    b.HasKey("ChargeId");

                    b.HasIndex("CarId");

                    b.HasIndex("ChargerId");

                    b.HasIndex("MemberId");

                    b.ToTable("Chargings");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Location", b =>
                {
                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"));

                    b.Property<string>("MemberLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Migrations.Offers", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferId"));

                    b.Property<int>("CompanyOffered")
                        .HasColumnType("int");

                    b.Property<int>("MemberOffered")
                        .HasColumnType("int");

                    b.Property<float>("OfferRate")
                        .HasColumnType("real");

                    b.Property<string>("OfferType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OfferId");

                    b.HasIndex("CompanyOffered");

                    b.HasIndex("MemberOffered");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Model", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModelId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ModelRange")
                        .HasColumnType("real");

                    b.HasKey("ModelId");

                    b.HasIndex("BrandId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Reserve", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<int>("ChargerId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<bool>("OccupationStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeReserved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeReservedUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("ReservationId");

                    b.HasIndex("ChargerId");

                    b.HasIndex("MemberId");

                    b.ToTable("Reserves");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Car", b =>
                {
                    b.HasOne("TermProjectEVBud.Data.Member", "Member")
                        .WithMany("Cars")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TermProjectEVBud.Data.Model", "Model")
                        .WithMany("Cars")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Charger", b =>
                {
                    b.HasOne("TermProjectEVBud.Data.ChargerCompany", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TermProjectEVBud.Data.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Company");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Charging", b =>
                {
                    b.HasOne("TermProjectEVBud.Data.Car", "Car")
                        .WithMany("Chargings")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TermProjectEVBud.Data.Charger", "Charger")
                        .WithMany("Chargings")
                        .HasForeignKey("ChargerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TermProjectEVBud.Data.Member", "Member")
                        .WithMany("Chargings")
                        .HasForeignKey("MemberId");

                    b.Navigation("Car");

                    b.Navigation("Charger");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Migrations.Offers", b =>
                {
                    b.HasOne("TermProjectEVBud.Data.ChargerCompany", "Company")
                        .WithMany("Offers")
                        .HasForeignKey("CompanyOffered")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TermProjectEVBud.Data.Member", "Member")
                        .WithMany("Offers")
                        .HasForeignKey("MemberOffered")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Model", b =>
                {
                    b.HasOne("TermProjectEVBud.Data.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Reserve", b =>
                {
                    b.HasOne("TermProjectEVBud.Data.Charger", "Charger")
                        .WithMany("Reserves")
                        .HasForeignKey("ChargerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TermProjectEVBud.Data.Member", "Member")
                        .WithMany("Reserves")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Charger");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Brand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Car", b =>
                {
                    b.Navigation("Chargings");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Charger", b =>
                {
                    b.Navigation("Chargings");

                    b.Navigation("Reserves");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.ChargerCompany", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Member", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Chargings");

                    b.Navigation("Offers");

                    b.Navigation("Reserves");
                });

            modelBuilder.Entity("TermProjectEVBud.Data.Model", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
